name: Docker Image CI Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  deploy-and-build:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: hardhat/package-lock.json
      
      - name: Install dependencies
        run: |
          cd hardhat
          npm ci

      - name: Running Tests
        run: |
          cd hardhat
          npx hardhat test
      
      - name: Start local devnet
        run: |
          echo "Starting local Ethereum devnet with forked go-ethereum"
          docker pull --platform linux/amd64 krishum77/get-etherium-assignment:latest
          docker run -d --platform linux/amd64 --name eth-devnet -p 8545:8545 \
            krishum77/get-etherium-assignment:latest \
            --dev --http --http.addr "0.0.0.0" --http.api "eth,net,web3,personal" --mine
          
          # Wait for blockchain to be ready
          sleep 10
      
      - name: Deploy Hardhat project to devnet
        run: |
          echo "Deploying contracts to local devnet"
          
          # Configure Hardhat to use local devnet
          cat > hardhat.config.local.js << 'EOL'
          const config = require('./hardhat/hardhat.config');
          config.networks.local = {
            url: "http://localhost:8545",
            accounts: {
              mnemonic: "test test test test test test test test test test test junk"
            }
          };
          module.exports = config;
          EOL
          
          # Deploy contracts
          npx hardhat run --config hardhat/hardhat.config.local.js hardhat/scripts/deploy.js --network local
          
          # Save deployment artifacts
          mkdir -p /tmp/deployments
          cp -R artifacts/ /tmp/deployments/
          # Save deployment addresses if available
          [ -d deployments ] && cp -R deployments/ /tmp/deployments/
      
      - name: Create Dockerfile for pre-deployed devnet
        run: |
          # Create Dockerfile for the new image
          cat > Dockerfile.predeployed << 'EOL'
          FROM krishum77/get-ethereum-assignment:latest
          
          # Copy deployment artifacts
          COPY ./deployments /app/deployments
          
          # Create startup script
          COPY ./start-devnet.sh /app/start-devnet.sh
          RUN chmod +x /app/start-devnet.sh
          
          EXPOSE 8545
          
          ENTRYPOINT ["/app/start-devnet.sh"]
          EOL
          
          # Create startup script
          cat > start-devnet.sh << 'EOL'
          #!/bin/sh
          echo "Starting Ethereum devnet with pre-deployed contracts"
          /usr/local/bin/geth \
            --dev \
            --http \
            --http.addr "0.0.0.0" \
            --http.api "eth,net,web3,personal" \
            --datadir /tmp/ethdata \
            --mine
          EOL
          
          # Copy deployment artifacts
          mkdir -p deployments
          cp -R /tmp/deployments/* deployments/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.predeployed
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/get-ethereum-assignment:predeployed
